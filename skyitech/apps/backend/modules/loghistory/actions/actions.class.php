<?php
// auto-generated by sfPropelCrud
// date: 2009/12/16 17:37:20
?>
<?php

/**
 * loghistory actions.
 *
 * @package    
 * @subpackage loghistory
 * @author     Your name here
 * @version    SVN: $Id: actions.class.php 3335 2007-01-23 16:19:56Z fabien $
 */
class loghistoryActions extends sfActions
{
  public function executeIndex()
  {
    return $this->forward('loghistory', 'list');
  }

  public function executeList()
  {
    $c = new Criteria();
    $c->addDescendingOrderByColumn(LogHistoryPeer::ID);
    $pager = new sfPropelPager('LogHistory', 20);
    $pager->setCriteria($c);
    $pager->setPage($this->getRequestParameter('page', 1));
    $pager->init();
    $this->pager = $pager;
    $this->log_historys = $pager->getResults();
  }

	public function executeFiles(){
		$this->day = $this->getRequestParameter('day');
    $c = new Criteria();
		$c->add(LogHistoryPeer::DATE, $this->day);
    $this->log_history = LogHistoryPeer::doSelectOne($c);
	}

  public function executeShow()
  {
    $this->log_history = LogHistoryPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->log_history);
  }

  public function executeCreate()
  {
    $this->log_history = new LogHistory();

    $this->setTemplate('edit');
  }

  public function executeEdit()
  {
    $this->log_history = LogHistoryPeer::retrieveByPk($this->getRequestParameter('id'));
    $this->forward404Unless($this->log_history);
  }

  public function executeUpdate()
  {
    if (!$this->getRequestParameter('id'))
    {
      $log_history = new LogHistory();
    }
    else
    {
      $log_history = LogHistoryPeer::retrieveByPk($this->getRequestParameter('id'));
      $this->forward404Unless($log_history);
    }

    $log_history->setId($this->getRequestParameter('id'));
    $log_history->setDate($this->getRequestParameter('date'));
    $log_history->setHost($this->getRequestParameter('host'));
    $log_history->setHits($this->getRequestParameter('hits'));
    $log_history->setDownload($this->getRequestParameter('download'));
    $log_history->setFiles($this->getRequestParameter('files'));

    $log_history->save();

    return $this->redirect('loghistory/show?id='.$log_history->getId());
  }

  public function executeDelete()
  {
    $log_history = LogHistoryPeer::retrieveByPk($this->getRequestParameter('id'));

    $this->forward404Unless($log_history);

    $log_history->delete();

    return $this->redirect('loghistory/list');
  }
}
